<!-- room.hbs -->

<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <meta name="viewport" content= "width=device-width, user-scalable=no">
  <title>Game Room</title>
  <link rel="icon" href="/icon.png" type="image/png">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Roboto+Condensed:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="/style.css" />
  <link rel="stylesheet" href="/effects/exp.css" />

</head>

<body>
  <div id="wrapper" class="wrapper">
    <div>Your nickname: <strong id="nicknameElement">{{nickname}}</strong></div>

    Connected Users:
    <strong id="userList"></strong>
    <br><br>

    <div id="turns">
      <div id="redTurnButton" class="turnBtn red-item2 ds be">▶</div>
      <div id="blueTurnButton" class="turnBtn blue-item2 ds be">▶</div>
    </div>

    <div id="teams">
      <div id="team-red" class="red-item1">Red Team:
        <div id="redLeader"></div>
        <ul id="redTeamList"></ul>
      </div>
      <div id="team-blue" class="blue-item1">Blue Team:
        <div id="blueLeader"></div>
        <ul id="blueTeamList"></ul>
      </div>
    </div>
    <br>

    <div id="team-btns">
      <button class="team-btn red-item2 ds be" id="redLeaderButton">Стать капитаном красных</button>
      <button class="team-btn blue-item2 ds be" id="blueLeaderButton">Стать капитаном синих</button>
      <br><br>

      <button class="team-btn red-item2 ds be" id="redJoinButton">Присоединиться к красным</button>
      <button class="team-btn blue-item2 ds be" id="blueJoinButton">Присоединиться к синим</button>
      <br><br>
    </div>

    <div id="board">
      <button class="item" data-button-id="0">0</button>
      <button class="item" data-button-id="1">1</button>
      <button class="item" data-button-id="2">2</button>
      <button class="item" data-button-id="3">3</button>
      <button class="item" data-button-id="4">4</button>
      <button class="item" data-button-id="5">5</button>
      <button class="item" data-button-id="6">6</button>
      <button class="item" data-button-id="7">7</button>
      <button class="item" data-button-id="8">8</button>
      <button class="item" data-button-id="9">9</button>
      <button class="item" data-button-id="10">10</button>
      <button class="item" data-button-id="11">11</button>
      <button class="item" data-button-id="12">12</button>
      <button class="item" data-button-id="13">13</button>
      <button class="item" data-button-id="14">14</button>
      <button class="item" data-button-id="15">15</button>
      <button class="item" data-button-id="16">16</button>
      <button class="item" data-button-id="17">17</button>
      <button class="item" data-button-id="18">18</button>
      <button class="item" data-button-id="19">19</button>
      <button class="item" data-button-id="20">20</button>
      <button class="item" data-button-id="21">21</button>
      <button class="item" data-button-id="22">22</button>
      <button class="item" data-button-id="23">23</button>
      <button class="item" data-button-id="24">24</button>
    </div>
    <br><br>
    <button id="leaveRoomButton">Выйти из комнаты</button>
    <button id="leaveTeamButton">Выйти из команды</button>
    <button id="restartGameButton">Перезапустить игру</button>
    <button id="showTutorial">Как играть</button>
  </div>

  <object id="tutorialObject" data="tutorial.html" type="text/html" style="position: fixed; z-index: 999; top: 0; left: 0; width: 100vw; height: 100vw;"></object>


  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="/effects/exp.js"></script>
  <script>
    const nickname = document.getElementById("nicknameElement").innerText;
    const userList = document.getElementById("userList");
    const redLeaderDisplay = document.getElementById("redLeader");
    const blueLeaderDisplay = document.getElementById("blueLeader");
    const redTeamList = document.getElementById("redTeamList");
    const blueTeamList = document.getElementById("blueTeamList");
    const teamBlue = document.getElementById("team-blue");
    const teamRed = document.getElementById("team-red");
    const wrapper = document.getElementById("wrapper");
    const teamBtns = document.getElementById("team-btns");
    const showTutorial = document.getElementById("showTutorial");
    const tutorialOverlay = document.getElementById("tutorial-overlay");

    console.log("-->" + tutorialObject);

    const protocol = window.location.protocol === "https:" ? "wss" : "ws";
    const ws = new WebSocket(`${protocol}://${window.location.host}`);

    let heartbeatInterval;
    let redLeader = null;
    let blueLeader = null;

    let user_list = "_";

    //team Enum
    const Team = Object.freeze({
        RED: 1,
        BLUE: 2,
        NONE: 0
    });

    let team = Team.NONE;
    let turn = Team.NONE;

    // Send join event on WebSocket connection
    ws.addEventListener("open", () => {
      console.log("WebSocket connected. Sending join event.");
      ws.send(JSON.stringify({ type: "join", nickname }));

      heartbeatInterval = setInterval(() => {
        console.log("Sending heartbeat.");
        ws.send(JSON.stringify({ type: "heartbeat" }));
      }, 10000); // Send heartbeat every 10 seconds
    });

    ws.addEventListener("close", () => {
      console.warn("WebSocket connection closed.");
      clearInterval(heartbeatInterval);
    });

    // Handle incoming WebSocket messages
    ws.addEventListener("message", (event) => {
      console.log("137");
      const data = JSON.parse(event.data);
      console.log("139");
      if (data.type === "updateUsers") {
        console.log("Updating user list, Catains, and teams:", data);
        console.log("142");
        if (data.turn.blueTurn) {
          //teamBlue.classList.add("glowOutline");
          //teamRed.classList.remove("glowOutline");
          turn = Team.BLUE;
        }
        if (data.turn.redTurn) {
          //teamBlue.classList.remove("glowOutline");
          //teamRed.classList.add("glowOutline");
          turn = Team.RED;
        }
        console.log("153");
        redLeader = data.redLeader.name;
        blueLeader = data.blueLeader.name;

        console.log("activeUsers " + data.activeUsers);
        // Update user list
        userList.innerHTML = ""; // Clear the current list
        user_list = "";
        (data.activeUsers || []).forEach((user) => {
          const sp = document.createElement("span");
          sp.innerText = user + ", "; // Add each user to the list
          user_list += user + ", ";
          console.log("--- " +user);
          userList.appendChild(sp);
        });

      
        team = getTeam(data);

        // Update Red Leader and Team
        redLeaderDisplay.innerText = `Captain: ${redLeader || "None"}`;
        redTeamList.innerHTML = ""; // Clear the current list
        console.log("--->redTeamUsers");
        console.log(data.redTeamUsers);
        (data.redTeamUsers || []).forEach((user, index) => {
          if (user === redLeader) return;
          const li = document.createElement("li");
          li.innerText = `${user}`;
          redTeamList.appendChild(li);
        });

        // Update Blue Leader and Team
        blueLeaderDisplay.innerText = `Captain: ${blueLeader || "None"}`;
        blueTeamList.innerHTML = ""; // Clear the current list
        console.log("--->blueTeamUsers");
        console.log(data.blueTeamUsers);
        (data.blueTeamUsers || []).forEach((user, index) => {
          if (user === blueLeader) return;
          const li = document.createElement("li");
          li.innerText = `${user}`;
          blueTeamList.appendChild(li);
        });

        
        
        switch (team) {
          case Team.RED:
            wrapper.classList.remove("bg-blue");
            wrapper.classList.add("bg-red");
            setTeamBtnsActive(false);
            break;
          case Team.BLUE:
            wrapper.classList.remove("bg-red");
            wrapper.classList.add("bg-blue");
            setTeamBtnsActive(false);
            break;
          default:
            wrapper.classList.remove("bg-red");
            wrapper.classList.remove("bg-blue");
            setTeamBtnsActive(true);
            break;
        }

        switch (turn) {
          case Team.RED:
            teamBlue.classList.remove("glowOutline");
            teamRed.classList.add("glowOutline");
            break;
          case Team.BLUE:
            teamRed.classList.remove("glowOutline");
            teamBlue.classList.add("glowOutline");
            break;
          default:
            teamRed.classList.remove("glowOutline");
            teamBlue.classList.remove("glowOutline");
            break;
        }

      }

      if (data.type === "updateWords") {
        console.log("Updating words:", data);
        updateWord(data.words);
      }
      if (data.type === "updateWordsAnim") {
        console.log("Updating words Anim:", data);
        newWord(data.words);
      }

    });

    var wordsCache;
    function newWord(words) {
      if (wordsCache.length < 1) return;
      for (let i=0; i < wordsCache.length; i++) {
        if (wordsCache[i].open != words[i].open)
        {
          console.log(i+"is new");
          const btn = document.querySelector(`[data-button-id="${words[i].index}"]`);
          explodeObj(btn);
          break;
        }
      }
    }
    function updateWord(words) {
      wordsCache = words;
      words.forEach((word) => {
        const button = document.querySelector(`[data-button-id="${word.index}"]`);
        if (button) {
          button.innerText = word.spell;
          word.voters.forEach((voter) => {
            //const brElement = document.createElement("br");
            //button.appendChild(brElement);
            const voterElement = document.createElement("span");
            voterElement.textContent = voter;
            button.appendChild(voterElement);
          });

          console.log(`--- ${nickname} r: ${redLeader} b: ${blueLeader}`);
          if (word.open == true || nickname === redLeader || nickname === blueLeader) {
            button.style.backgroundColor = getColor(word.type);
            setBtnHiddenState(button, word.open);
          } else {
            button.style.backgroundColor = getColor(null);
            setBtnHiddenState(button, true);
          }
        }
      });
    }

    function setBtnHiddenState(btn, open) {
      if (!open) btn.classList.add("hidden");
      else btn.classList.remove("hidden");
    }

    function setTeamBtnsActive(state) {
      teamBtns.style.display = state ? "inline" : "none";
    }

    function getColor(type) {
      let colorName = "";
      switch (type) {
        case 0: colorName = "--color-gray2"; break;
        case 1: colorName = "--color-red1"; break;
        case -1: colorName = "--color-black"; break;
        case 2: colorName = "--color-blue1"; break;
        default: colorName = ""; break;
      }

      const rootStyles = getComputedStyle(document.documentElement);
      const color = rootStyles.getPropertyValue(colorName).trim();
      return color;
    }

    function getTeam(data) {
      if (nickname === redLeader) return Team.RED;
      if (nickname === blueLeader) return Team.BLUE;
      
      for (const user of data.redTeamUsers || []) {
        if (user === nickname) return Team.RED; // Use RED enum here
      }

      for (const user of data.blueTeamUsers || []) {
        if (user === nickname) return Team.BLUE; // Use BLUE enum here
    }
      return null;
    }

    // Event listeners for buttons
    document.getElementById("leaveRoomButton").addEventListener("click", () => {
      console.log("Leaving the room.");
      ws.send(JSON.stringify({ type: "leaveRoom", nickname }));
      window.location.href = "/";
    });

    document.getElementById("leaveTeamButton").addEventListener("click", () => {
      console.log("Leaving Team.");
      ws.send(JSON.stringify({ type: "leaveTeam", nickname }));
    });

    document.getElementById("restartGameButton").addEventListener("click", () => {
      console.log("Restart Game.");
      ws.send(JSON.stringify({ type: "restartGame", nickname }));
    });

    document.getElementById("redLeaderButton").addEventListener("click", () => {
      console.log(`${nickname} wants to become Red Leader.`);
      ws.send(JSON.stringify({ type: "redLeader", nickname }));
    });

    document.getElementById("blueLeaderButton").addEventListener("click", () => {
      console.log(`${nickname} wants to become Blue Leader.`);
      ws.send(JSON.stringify({ type: "blueLeader", nickname }));
    });

    document.getElementById("redJoinButton").addEventListener("click", () => {
      console.log(`${nickname} wants to join red.`);
      ws.send(JSON.stringify({ type: "redJoin", nickname }));
    });

    document.getElementById("blueJoinButton").addEventListener("click", () => {
      console.log(`${nickname} wants to join blue.`);
      ws.send(JSON.stringify({ type: "blueJoin", nickname }));
    });

    document.getElementById("redTurnButton").addEventListener("click", () => {
      ws.send(JSON.stringify({ type: "redTurn", nickname }));
    });
    document.getElementById("blueTurnButton").addEventListener("click", () => {
      ws.send(JSON.stringify({ type: "blueTurn", nickname }));
    });

    // Notify server on page unload
    window.addEventListener("beforeunload", () => {
      ws.send(JSON.stringify({ type: "leave", nickname }));
    });

    document.getElementById("board").addEventListener("click", (event) => {
      if (event.target.tagName != "BUTTON") return;
      if (team != turn) return;
      if (nickname === redLeader || nickname === blueLeader) return;
      const buttonId = parseInt(event.target.getAttribute("data-button-id"), 10); // Convert to integer
      console.log(`Button with ID ${buttonId} was clicked!`);
      ws.send(JSON.stringify({ type: "buttonClick", buttonId, nickname }));
    });

    document.getElementById("showTutorial").addEventListener("click", (event) => {
      alert(tutorialOverlay);
      tutorialOverlay.style.display = "block";
    });

  </script>

<div style="position: fixed;
    left: 0;
    bottom: 0;
    font-size: 2vw;">v0.56.1</div>
</body>

</html>